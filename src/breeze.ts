import { makeRelationArray, makePrimitiveArray, makeComplexArray } from './array';
// Not documented - only exposed for testing purposes
// import { OrderByClause } from './entity-query';
import { DataService, JsonResultsAdapter } from './data-service';
import { DataType, DataTypeSymbol } from './data-type';
import { EntityAction, EntityActionSymbol } from './entity-action';
import { EntityAspect, ComplexAspect } from './entity-aspect';
import { EntityKey } from './entity-key';
import { EntityManager } from './entity-manager';
import { EntityQuery, FilterQueryOp} from './entity-query';
import { EntityState, EntityStateSymbol } from './entity-state';
import { KeyGenerator } from './key-generator';
import { LocalQueryComparisonOptions } from './local-query-comparison-options';
import { MetadataStore, EntityType, ComplexType, DataProperty, NavigationProperty, AutoGeneratedKeyType   } from './entity-metadata';
import { NamingConvention } from './naming-convention';
import { Predicate } from './predicate';
import { QueryOptions,  FetchStrategy, MergeStrategy } from './query-options';
import { SaveOptions } from './save-options';
import { core } from './core';


export const breeze = {
  AutoGeneratedKeyType: AutoGeneratedKeyType,
  ComplexAspect: ComplexAspect,
  ComplexType: ComplexType,
  DataProperty: DataProperty,
  DataService: DataService,
  DataType: DataType,
  DataTypeSymbol: DataTypeSymbol,
  EntityAction: EntityAction,
  EntityActionSymbol: EntityActionSymbol,
  EntityAspect: EntityAspect,
  EntityKey: EntityKey,
  EntityManager: EntityManager,
  EntityQuery: EntityQuery,
  EntityState: EntityState,
  EntityStateSymbol: EntityStateSymbol,
  EntityType: EntityType,
  FetchStrategy: FetchStrategy,
  FilterQueryOp: FilterQueryOp,
  JsonResultsAdapter: JsonResultsAdapter,
  KeyGenerator: KeyGenerator,
  LocalQueryComparisonOptions: LocalQueryComparisonOptions,
  MergeStrategy: MergeStrategy,
  MetadataStore: MetadataStore,
  NamingConvention: NamingConvention,
  NavigationProperty: NavigationProperty,
  Predicate: Predicate,
  QueryOptions: QueryOptions,
  SaveOptions: SaveOptions,
  core: core,
  makeRelationArray: makeRelationArray,
  makeComplexArray: makeComplexArray,
  makePrimitiveArray: makePrimitiveArray
};
