import { breeze } from './core';
import { ISaveContext, ISaveBundle  } from './entity-manager';
import { MetadataStore } from './entity-metadata';
import { MappingContext } from './mapping-context';
import { JsonResultsAdapter, INodeContext } from './data-service';
import { AbstractDataServiceAdapter } from './abstract-data-service-adapter';

export class DataServiceWebApiAdapter extends AbstractDataServiceAdapter {

  constructor() {
    super();
    this.name = "webApi";
  };


  _prepareSaveBundle(saveContext: ISaveContext, saveBundle: ISaveBundle ) {
    let changeRequestInterceptor = this._createChangeRequestInterceptor(saveContext, saveBundle);
    let em = saveContext.entityManager;
    let metadataStore = em.metadataStore;
    let helper = em.helper;
    let serSaveBundle: any = {};
    serSaveBundle.entities = saveBundle.entities.map(function (e, ix) {
      let rawEntity = helper.unwrapInstance(e);

      let autoGeneratedKey: Object | undefined;
      if (e.entityType.autoGeneratedKeyType !== breeze.AutoGeneratedKeyType.None) {
        autoGeneratedKey = {
          propertyName: e.entityType.keyProperties[0].nameOnServer,
          autoGeneratedKeyType: e.entityType.autoGeneratedKeyType.name
        };
      }

      let originalValuesOnServer = helper.unwrapOriginalValues(e, metadataStore);
      rawEntity.entityAspect = {
        entityTypeName: e.entityType.name,
        defaultResourceName: e.entityType.defaultResourceName,
        entityState: e.entityAspect.entityState.name,
        originalValuesMap: originalValuesOnServer,
        autoGeneratedKey: autoGeneratedKey
      };
      rawEntity = changeRequestInterceptor.getRequest(rawEntity, e, ix);
      return rawEntity;
    });

    serSaveBundle.saveOptions = { tag: saveBundle.saveOptions.tag };
    changeRequestInterceptor.done(serSaveBundle.entities);
    return serSaveBundle;
  };

  _prepareSaveResult(saveContext: ISaveContext, data: any) {
    // use the jsonResultAdapter to extractResults and extractKeyMappings
    let jra = saveContext.dataService.jsonResultsAdapter || this.jsonResultsAdapter;
    let entities = jra.extractSaveResults(data) || [];
    let keyMappings = jra.extractKeyMappings(data) || [];

    if (keyMappings.length) {
      // HACK: need to change the 'case' of properties in the saveResult
      // but KeyMapping properties internally are still ucase. ugh...
      keyMappings = keyMappings.map(function (km) {
        if (km.entityTypeName) return km; // it's already lower case
        let kmHack = km as any;
        let entityTypeName = MetadataStore.normalizeTypeName(kmHack.EntityTypeName);
        return { entityTypeName: entityTypeName, tempValue: kmHack.TempValue, realValue: kmHack.RealValue };
      });
    }
    return { entities: entities, keyMappings: keyMappings };
  };

  jsonResultsAdapter = new JsonResultsAdapter({

    name: "webApi_default",

    visitNode: function (node: any, mappingContext: MappingContext, nodeContext: INodeContext) {
      if (node == null) return {};
      let entityTypeName = MetadataStore.normalizeTypeName(node.$type);
      let entityType = entityTypeName && mappingContext.entityManager.metadataStore.getEntityType(entityTypeName, true);
      let propertyName = nodeContext.propertyName;
      let ignore = propertyName && propertyName.substr(0, 1) === "$";

      return {
        entityType: entityType,
        nodeId: node.$id,
        nodeRefId: node.$ref,
        ignore: ignore
      } as any;
    }

  });


}

 breeze.config.registerAdapter("dataService", DataServiceWebApiAdapter);